/* ----------------------------------------------------------------------------
* Copyright &copy; 2016 Jimmy Xuan <jimmyxuan@fullerton.edu>
* Released under the [MIT License] (http://opensource.org/licenses/MIT)
* ------------------------------------------------------------------------- */
//Searching, Sorting and Algorihim Analysis

#include <iostream>
#include <vector>
using std::cout;
using std::cin;
using std::endl; 
using std::vector;

vector<int> merge(vector<int> left, vector<int> right);

void print_vector(const vector<int> & a)
{
	for (int n : a)
	{
		cout << n << " ";
	}
	cout << endl;
}

void selection_sort(vector<int> & a)
{
	int min = a[0];
	int size = a.size();
	for (int c = 0; c < size; c++)
	{
		for (int d = c; c < size; d++)
			if (a[d] < a[min])
			{
				min = d;
			}
		if (c != min)
		{
			int temp = c;
			a[c] = a[min];
			a[min] = a[temp];
		}
	}
}

vector<int> merge_sort(const vector<int> & a) {

	if (a.size() <= 1) return a;

	else {
		int half = ((int)a.size() + 1) / 2;
		vector<int> left, right, sorted;
		for (int i = 0; i < half; i++) {
			left.push_back(a[i]);

		}

		for (int i = half; i < (int)a.size(); i++) {
			right.push_back(a[i]);

		}

		left = merge_sort(left);
		right = merge_sort(right);
		sorted = merge(left, right);

		return sorted;

	}

}

vector<int> merge(vector<int> left, vector<int> right) {
	vector<int> sorted;

	while ((int)left.size() > 0 || (int)right.size() > 0) {

		if ((int)left.size() > 0 && (int)right.size() > 0) {
			if ((int)left.front() <= (int)right.front()) {
				sorted.push_back((int)left.front());
				left.erase(left.begin());

			}
			else {
				sorted.push_back((int)right.front());
				right.erase(right.begin());

			}

		}

		else if ((int)left.size() > 0) {
			for (int i = 0; i < (int)left.size(); i++)
				sorted.push_back(left[i]);
			break;

		}

		else if ((int)right.size() > 0) {
			for (int i = 0; i < (int)right.size(); i++)
				sorted.push_back(right[i]);
			break;

		}

	}

	return sorted;

}

int main()
{
	vector<int> v = { 65, 10, 43, 5, 2, 10, };
	
	

	

	return 0;
}
