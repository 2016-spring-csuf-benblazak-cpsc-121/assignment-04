/* ----------------------------------------------------------------------------
* Copyright &copy; 2016 Vincent Sacharske <vsacharske97@csu.fullerton.edu>
* Released under the [MIT License] (http://opensource.org/licenses/MIT)
* ------------------------------------------------------------------------- */

/**
* Program that uses merge sort and selection sort.
*/


#include <iostream>
#include <vector>

using std::cout;
using std::cin;
using std::endl;
using std::vector;

void print_vector(vector<int> & a);
void selection_sort(vector<int> & a);

vector<int> merge_sort(const vector<int> & a);

int main()
{
	return 0;
}
void print_vector(vector<int> & a)
{
	for (int i = 0; i < a.size(); i++)
	{
		cout << a[i] << endl;
		
	}
}
void selection_sort(vector<int> & a)
{
	for (int i = 0; i < a.size(); i++)
	{
		int b = i;
		for (int j = i + 1; j < a.size(); j++)
		{
			if (a[j] < a[b])
			{
				b = j;
			}
		}
		if (b != i)
		{
			int k = a[i];
			a[i] = a[b];
			a[b] = k;
		}
	}
}
vector<int> merge_sort(const vector<int> & a)
{
	int h = a.size() / 2;
	vector<int> l;
	vector<int> r;
	int startl = 0;
	int startr = 0;
	if (a.size() == 1)
		return a;
	for (int i = 0; i < h; i++)
		l.push_back(a[i]);
	for (int i = h; i < a.size(); i++)
		r.push_back(a[i]);
	l = merge_sort(l);
	r = merge_sort(r);
	vector<int> sorted;
	while (startl < l.size() && startr < r.size())
	{
		if (l[startl] < r[startr])
		{
			sorted.push_back(l[startl]);
			startl++;
		}
		else
		{
			sorted.push_back(r[startr]);
			startr++;
		}
	}
	if (startl >= l.size())
	{
		for (int i = startr; i < r.size(); i++)
		{
			sorted.push_back(r[startr]);
			startr++;
		}
	}
	if (startr >= r.size())
	{
		for (int i = startl; i < l.size(); i++)
		{
			sorted.push_back(l[startl]);
			startl++;
		}
	}
	return sorted;
}	
