Copyright &copy; 2016 Daniel Bybee <dbybee@csu.fullerton.edu>
Released under the [MIT License] (http://opensource.org/licenses/MIT)

  #include <iostream>
  #include <vector>
  
  using std::cout;
  using std::endl;
  using std::vector;

  void print_vector(const vector<int> &q);
  void selection_sort(vector<int> &q);
  vector<int> merge(vector<int> left, vector<int> right);
  vector<int> merge_sort(const vector<int> &w);
  
      int main() {
  vector<int> q = { 2, 0, -8, -3, 1 };
  vector<int> merge_sorted;
  cout << "The original list: ";
  print_vector(q);
  cout << endl;
  
   selection_sort(q);

		 merge_sorted = merge_sort(q);
	 cout << "Merge sort: ";
	 print_vector(merge_sorted);

		 cout << endl;
	 system("pause");
	 
	 return 0;
}

 void print_vector(const vector<int> &q) {
	 vector<int>::const_iterator e;
	 for (e = q.begin(); e != q.end(); e++) {
		 cout << *e << " ";
}
	 cout << endl;
}

 void selection_sort(vector<int> &q) {
	 for (int a = 0; a < q.size(); a++) {
		 for (int b = 0; b < a; b++) {
			 if (q[b] > q[b + 1]) {
				 int temp = v[b];
				 q[b] = q[b + 1];
				 q[b + 1] = temp;
}

}
	
}
	  cout << "Selection sort: ";
	 for (int i = 0; i < q.size(); i++) {
	 cout << q[i] << " ";
}
	 cout << endl;
}

 vector<int> merge_sort(const vector<int> &w) {
		 if (w.size() <= 1) return w;

		 else {
		 int half = ((int)w.size() + 1) / 2;
		 vector<int> left, right, sorted;
		 for (int i = 0; i < half; i++) {
			 left.push_back(w[i]);
}
	
			 for (int i = half; i < (int)w.size(); i++) {
			 right.push_back(w[i]);
}
			 left = merge_sort(left);
		 right = merge_sort(right);
		 sorted = merge(left, right);
			 return sorted;
}
}

 vector<int> merge(vector<int> left, vector<int> right) {
 vector<int> sorted;
	
		 while ((int)left.size() > 0 || (int)right.size() > 0) {
		 if ((int)left.size() > 0 && (int)right.size() > 0) {
			 if ((int)left.front() <= (int)right.front()) {
				 sorted.push_back((int)left.front());
				 left.erase(left.begin());
}
			 else {
				 sorted.push_back((int)right.front());
				 right.erase(right.begin());
			}
		}
			 else if ((int)left.size() > 0) {
			 for (int i = 0; i < (int)left.size(); i++)
				 sorted.push_back(left[i]);
			 break;
		}
			 else if ((int)right.size() > 0) {
			 for (int i = 0; i < (int)right.size(); i++)
				 sorted.push_back(right[i]);
			 break;
}
}
 return sorted;
}
